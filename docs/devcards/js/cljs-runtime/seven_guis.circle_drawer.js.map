{"version":3,"sources":["seven_guis/circle_drawer.cljs"],"mappings":"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","names":["js/seven-guis","js/seven-guis.circle-drawer","js/seven-guis.circle-drawer.component-ref","seven-guis.circle-drawer/component-ref","cljs.core.atom","js/seven-guis.circle-drawer.component-state","seven-guis.circle-drawer/component-state","reagent.core.atom","js/seven-guis.circle-drawer.ui","seven-guis.circle-drawer/ui","p__40457","map__40458","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seven-guis.circle-drawer/draw-circle","ctx","x","y","radius","fill?","js/Math.PI","cljs.core/add-watch","p__40460","map__40461","_","circles","selected-circle-id","temp__5735__auto__","canvas","G__40463","cljs.core/deref","clear-canvas","draw-circles","cljs.core.dorun","cljs.core.map","cljs.core.partial","cljs.core/vals","selected-circle","fill-selected-circle","p__40464","map__40465","seven-guis.circle-drawer/create-circle","state","next-id","cljs.core/max","cljs.core.conj","cljs.core/keys","cljs.core.update","cljs.core/assoc","cljs.test/test-var","seven-guis.circle-drawer/create-circle-test","cljs.test.update_current_env_BANG_","cljs.core/conj","cljs.test/update-current-env!","cljs.core/rest","values__9937__auto__","cljs.core/List","result__9938__auto__","cljs.test/report","cljs.core/cons","t__9974__auto__","e40467","cljs.core/=","p__40469","p__40470","vec__40471","cljs.core.nth","vec__40474","seven-guis.circle-drawer/points-distance","x1","y1","x2","y2","p1__40468#","square","js/Math.sqrt","seven-guis.circle-drawer/points-distance-test","e40477","e40478","e40479","seven-guis.circle-drawer/canvas-mouse-event","evt","f","G__40480","bound","scaleX","scaleY","seven-guis.circle-drawer/on-mouse-move","map__40481","distance-from-mouse","p__40482","map__40483","cx","cy","id","nearest","cljs.core/first","cljs.core.sort_by","cljs.core.swap_BANG_","seven-guis.circle-drawer/on-canvas-click","seven-guis.circle-drawer/open-context-menu","ui-state","container","G__40486","cljs.core/assoc-in","seven-guis.circle-drawer/dismiss-popup","seven-guis.circle-drawer/open-diameter-dialog","seven-guis.circle-drawer/update-radius","new-radius","cljs.core.update_in","seven-guis.circle-drawer/diameter-dialog","cljs.core._EQ_","map__40488","p1__40487#","selected-id","js/parseInt","p1__40490#","p1__40491#","p1__40492#","p1__40493#","seven-guis.circle-drawer/component","seven-guis.circle-drawer/register-component!","seven-guis.util/define-custom-element!"],"sourcesContent":["(ns seven-guis.circle-drawer\n  (:require\n[cljs.test :refer [deftest testing is run-tests]]\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]))\n\n(defonce component-ref (atom nil))\n(defonce component-state (reagent/atom {:circles {}\n                                        :selected-circle-id nil\n                                        :undo-states []\n                                        :redo-states []}))\n(defonce ui (reagent/atom {:popup {:x 0 :y 0}\n                           :context-menu {:visibility \"hidden\"}\n                           :diameter-dialog {:visibility \"hidden\"}}))\n\n(defn draw-circle [ctx {:keys [x y radius]} fill?]\n  (.beginPath ctx)\n  (.arc ctx x y radius 0 (* 2 js/Math.PI) true)\n  (set! (.-fillStyle ctx) \"gray\")\n  (if fill? (.fill ctx) (.stroke ctx)))\n\n(add-watch component-state :watcher\n   (fn [_ _ _ {:keys [circles selected-circle-id]}]\n     (when-let [canvas (some-> ^js @component-ref .-shadow (.querySelector \"canvas\"))]\n       (let [ctx (.getContext canvas \"2d\")\n             clear-canvas #(.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n             draw-circles #(dorun (map (partial draw-circle ctx) (vals circles)))\n             selected-circle (circles selected-circle-id)\n             fill-selected-circle #(when selected-circle (draw-circle ctx selected-circle true))]\n         (clear-canvas)\n         (draw-circles)\n         (fill-selected-circle)\n         ))))\n\n(defn create-circle [{:keys [circles] :as state} x y radius]\n  (let [next-id (inc (apply max (conj (keys circles) -1)))]\n    (update state :circles assoc next-id {:x x :y y :radius radius :id next-id})))\n\n(deftest create-circle-test\n  (testing\n    (is (= (-> {:circles {}}\n               (create-circle 0 0 10)\n               :circles)\n         {0 {:x 0 :y 0 :radius 10 :id 0}}))\n    ))\n\n(defn points-distance [[x1 y1] [x2 y2]]\n  (let [square #(* % %)]\n    (js/Math.sqrt (+ (square (- x2 x1)) (square (- y2 y1))))))\n\n(deftest points-distance-test\n  (testing\n    (is (= 5 (points-distance [0 0] [3 4])))\n    (is (= 5 (points-distance [1 1] [4 5])))\n    (is (= 13 (points-distance [1 1] [6 13])))))\n\n(defn canvas-mouse-event [evt f]\n  (when-let [canvas (some-> ^js @component-ref .-shadow (.querySelector \"canvas\"))]\n    (let [ctx (.getContext canvas \"2d\")\n          bound (.getBoundingClientRect canvas)\n          scaleX (/ (.-width canvas) (.-width bound))\n          scaleY (/ (.-height canvas) (.-height bound))\n          x (* (- (.-clientX evt) (.-left bound)) scaleX)\n          y (* (- (.-clientY evt) (.-top bound)) scaleY)]\n      (f x y))))\n\n(defn on-mouse-move [evt]\n  (canvas-mouse-event\n    evt\n    (fn [x y]\n      (let [distance-from-mouse (fn [{cx :x cy :y}] (points-distance [x y] [cx cy]))\n            {:keys [id radius] :as nearest} (first (sort-by distance-from-mouse (vals (:circles @component-state))))]\n        (when (< (distance-from-mouse nearest) radius)\n          (swap! component-state assoc :selected-circle-id id))))))\n\n(defn on-canvas-click [evt]\n  (canvas-mouse-event\n    evt\n    (fn [x y]\n      (swap! component-state create-circle x y 10))) )\n\n(defn open-context-menu [ui-state evt]\n  (.preventDefault evt)\n  (let [container (some-> ^js @component-ref .-shadow (.querySelector \"#container\"))\n        bound (.getBoundingClientRect container)\n        x (- (.-clientX evt) (.-left bound))\n        y (- (.-clientY evt) (.-top bound))]\n    (-> ui-state\n        (assoc-in [:popup :x] x)\n        (assoc-in [:popup :y] y)\n        (assoc-in [:context-menu :visibility] \"visible\"))))\n\n(defn dismiss-popup [ui-state evt]\n  (-> ui-state\n      (assoc-in [:context-menu :visibility] \"hidden\")\n      (assoc-in [:diameter-dialog :visibility] \"hidden\")))\n\n(defn open-diameter-dialog [ui-state evt]\n  (-> ui-state\n      (assoc-in [:context-menu :visibility] \"hidden\")\n      (assoc-in [:diameter-dialog :visibility] \"visible\")))\n\n(defn update-radius [state new-radius]\n   (let [id (:selected-circle-id state)]\n     (update-in state [:circles id] assoc :radius new-radius)))\n\n(defn diameter-dialog []\n  (when (= \"visible\" (-> @ui :diameter-dialog :visibility))\n    (let [selected-id (:selected-circle-id @component-state)\n          {:keys [x y radius]} (-> @component-state :circles (get selected-id))]\n      [:div#diameter-dialog.popup\n       [:p \"Adjust diameter of circle at (\"(.toFixed x)\", \"(.toFixed y)\")\"]\n       [:input#range\n        {:type \"range\"\n         :value (-> @component-state :circles (get selected-id) :radius)\n         :onChange #(swap! component-state update-radius (-> % .-target .-value js/parseInt))}]])))\n\n(defn component []\n  [:<>\n   [:style\n    (str \"\n    #container {\n      position: relative;\n    }\n    .dismiss-popup-layer {\n      z-index: 1199;\n      background-color: rgb(0 0 0 / 0.02);\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      visibility: \"(if (or (= (-> @ui :context-menu :visibility) \"visible\")\n                           (= (-> @ui :diameter-dialog :visibility) \"visible\"))\n                     \"visible\"\n                     \"hidden\")\";\n    }\n    .popup {\n      z-index: 1200;\n      box-shadow: 2px 2px 10px 0px lightgrey;\n      padding: 7px;\n      width: fit-content;\n      background-color: white;\n      position: absolute;\n      left: \"(-> @ui :popup :x)\"px;\n      top: \"(-> @ui :popup :y)\"px;\n    }\n    #context-menu {\n      visibility: \"(-> @ui :context-menu :visibility)\";\n    }\n    #diameter-dialog {\n      visibility: \"(-> @ui :diameter-dialog :visibility)\";\n    }\n    #context-menu:hover {\n      background-color: lightgray;\n      cursor: pointer;\n    }\n    #range {\n      width: 100%;\n    }\n    canvas {\n      width: 100%;\n      height: 400px;\n      border: 1px solid lightgray;\n    }\n    \")]\n   [:div#container\n    [:canvas\n     {:onContextMenu #(swap! ui open-context-menu %)\n      :onMouseMove on-mouse-move\n      :onClick on-canvas-click}]\n    [:div.dismiss-popup-layer {:onClick #(swap! ui dismiss-popup %)\n                               :onContextMenu #(swap! ui open-context-menu %)}]\n    [:div#context-menu.popup {:onClick #(swap! ui open-diameter-dialog %)} \"Adjust diameter..\"]\n    [diameter-dialog]]])\n\n(defn ^:dev/after-load register-component! []\n  (util/define-custom-element! {:element-name \"circle-drawer\"\n                                :view-component component\n                                :this component-ref}))\n\n(register-component!)\n\n"]}