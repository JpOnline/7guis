{"version":3,"sources":["seven_guis/circle_drawer.cljs"],"mappings":"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","names":["js/seven-guis","js/seven-guis.circle-drawer","js/seven-guis.circle-drawer.component-ref","seven-guis.circle-drawer/component-ref","cljs.core.atom","js/seven-guis.circle-drawer.component-state","seven-guis.circle-drawer/component-state","reagent.core.atom","js/seven-guis.circle-drawer.ui","seven-guis.circle-drawer/ui","p__43159","map__43160","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seven-guis.circle-drawer/draw-circle","ctx","x","y","radius","fill?","js/Math.PI","cljs.core/add-watch","p__43162","map__43163","_","circles","selected-circle-id","temp__5735__auto__","canvas","G__43165","cljs.core/deref","clear-canvas","draw-circles","cljs.core.dorun","cljs.core.map","cljs.core.partial","cljs.core/vals","selected-circle","fill-selected-circle","p__43166","map__43167","seven-guis.circle-drawer/create-circle","state","next-id","cljs.core/max","cljs.core.conj","cljs.core/keys","cljs.core.update","cljs.core/assoc","p__43170","p__43171","vec__43172","cljs.core.nth","vec__43175","seven-guis.circle-drawer/points-distance","x1","y1","x2","y2","p1__43169#","square","js/Math.sqrt","seven-guis.circle-drawer/position-relative-to-canvas","evt","G__43178","bound","scaleX","scaleY","p__43179","map__43180","seven-guis.circle-drawer/register-undo","old-circles","cljs.core._EQ_","cljs.core/conj","cljs.core.assoc","seven-guis.circle-drawer/on-mouse-move","vec__43182","map__43185","distance-from-mouse","p__43186","map__43187","cx","cy","id","nearest","cljs.core/first","cljs.core.sort_by","and__4115__auto__","cljs.core.swap_BANG_","p__43190","map__43191","seven-guis.circle-drawer/on-canvas-click","vec__43193","seven-guis.circle-drawer/open-context-menu","ui-state","container","G__43196","cljs.core/assoc-in","seven-guis.circle-drawer/dismiss-popup","seven-guis.circle-drawer/open-diameter-dialog","seven-guis.circle-drawer/update-radius","new-radius","cljs.core.update_in","seven-guis.circle-drawer/diameter-dialog","map__43198","selected-id","p1__43197#","js/parseInt","p__43200","map__43201","vec__43202","seq__43203","cljs.core/seq","first__43204","cljs.core/next","seven-guis.circle-drawer/apply-undo","actual-state","restored-circles","cljs.core/rest","p__43206","map__43207","vec__43208","seq__43209","first__43210","seven-guis.circle-drawer/apply-redo","p1__43212#","p1__43213#","p1__43214#","p1__43215#","p1__43216#","seven-guis.circle-drawer/component","cljs.core/empty?","s","seven-guis.circle-drawer/register-component!","seven-guis.util/define-custom-element!"],"sourcesContent":["(ns seven-guis.circle-drawer\n  (:require\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]))\n\n(defonce component-ref (atom nil))\n(defonce component-state (reagent/atom {:circles {}\n                                        :selected-circle-id nil\n                                        :undo-states '()\n                                        :redo-states '()}))\n(defonce ui (reagent/atom {:popup {:x 0 :y 0}\n                           :context-menu {:visibility \"hidden\"}\n                           :diameter-dialog {:visibility \"hidden\"}}))\n\n(defn draw-circle [ctx {:keys [x y radius]} fill?]\n  (.beginPath ctx)\n  (.arc ctx x y radius 0 (* 2 js/Math.PI) true)\n  (set! (.-fillStyle ctx) \"gray\")\n  (if fill? (.fill ctx) (.stroke ctx)))\n\n(add-watch component-state :watcher\n   (fn [_ _ _ {:keys [circles selected-circle-id]}]\n     (when-let [canvas (some-> ^js @component-ref .-shadow (.querySelector \"canvas\"))]\n       (let [ctx (.getContext canvas \"2d\")\n             clear-canvas #(.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n             draw-circles #(dorun (map (partial draw-circle ctx) (vals circles)))\n             selected-circle (circles selected-circle-id)\n             fill-selected-circle #(when selected-circle (draw-circle ctx selected-circle true))]\n         (clear-canvas)\n         (draw-circles)\n         (fill-selected-circle)\n         ))))\n\n(defn create-circle [{:keys [circles] :as state} x y radius]\n  (let [next-id (inc (apply max (conj (keys circles) -1)))]\n    (update state :circles assoc next-id {:x x :y y :radius radius :id next-id})))\n\n(defn points-distance [[x1 y1] [x2 y2]]\n  (let [square #(* % %)]\n    (js/Math.sqrt (+ (square (- x2 x1)) (square (- y2 y1))))))\n\n(defn position-relative-to-canvas [evt]\n  (when-let [canvas (some-> ^js @component-ref .-shadow (.querySelector \"canvas\"))]\n    (let [ctx (.getContext canvas \"2d\")\n          bound (.getBoundingClientRect canvas)\n          scaleX (/ (.-width canvas) (.-width bound))\n          scaleY (/ (.-height canvas) (.-height bound))\n          x (* (- (.-clientX evt) (.-left bound)) scaleX)\n          y (* (- (.-clientY evt) (.-top bound)) scaleY)]\n      [x y])))\n\n(defn register-undo [{:keys [circles] :as state} old-circles]\n  (if (= circles old-circles)\n    state\n    (-> state\n        (update :undo-states conj old-circles)\n        (assoc :redo-states '()))))\n\n(defn on-mouse-move [evt]\n  (let [[x y] (position-relative-to-canvas evt)\n        distance-from-mouse (fn [{cx :x cy :y}] (points-distance [x y] [cx cy]))\n        {:keys [id radius] :as nearest} (first (sort-by distance-from-mouse (vals (:circles @component-state))))]\n    (when (and x (< (distance-from-mouse nearest) radius))\n      (swap! component-state assoc :selected-circle-id id))))\n\n(defn on-canvas-click [{:keys [circles] :as state} evt]\n  (when-let [[x y] (position-relative-to-canvas evt)]\n    (-> state\n        (create-circle x y 10)\n        (register-undo circles))))\n\n(defn open-context-menu [ui-state evt]\n  (.preventDefault evt)\n  (let [container (some-> ^js @component-ref .-shadow (.querySelector \"#container\"))\n        bound (.getBoundingClientRect container)\n        x (- (.-clientX evt) (.-left bound))\n        y (- (.-clientY evt) (.-top bound))]\n    (-> ui-state\n        (assoc-in [:popup :x] x)\n        (assoc-in [:popup :y] y)\n        (assoc-in [:context-menu :visibility] \"visible\"))))\n\n(defn dismiss-popup [ui-state evt]\n  (-> ui-state\n      (assoc-in [:context-menu :visibility] \"hidden\")\n      (assoc-in [:diameter-dialog :visibility] \"hidden\")))\n\n(defn open-diameter-dialog [ui-state evt]\n  (-> ui-state\n      (assoc-in [:context-menu :visibility] \"hidden\")\n      (assoc-in [:diameter-dialog :visibility] \"visible\")))\n\n(defn update-radius [state new-radius]\n   (let [id (:selected-circle-id state)]\n     (update-in state [:circles id] assoc :radius new-radius)))\n\n(defn diameter-dialog []\n  (let [selected-id (:selected-circle-id @component-state)\n        {:keys [x y radius]} (-> @component-state :circles (get selected-id))]\n    (when (and x (= \"visible\" (-> @ui :diameter-dialog :visibility)))\n      [:div#diameter-dialog.popup\n       [:p \"Adjust diameter of circle at (\"(.toFixed x)\", \"(.toFixed y)\")\"]\n       [:input#range\n        {:type \"range\"\n         :value (-> @component-state :circles (get selected-id) :radius)\n         :onChange #(swap! component-state update-radius (-> % .-target .-value js/parseInt))}]])))\n\n(defn apply-undo [{actual-state :circles [restored-circles & _] :undo-states :as state}]\n  (-> state\n      (update :redo-states conj actual-state)\n      (assoc :circles restored-circles)\n      (update :undo-states rest)))\n\n(defn apply-redo [{actual-state :circles [restored-circles & _] :redo-states :as state}]\n  (-> state\n      (update :undo-states conj actual-state)\n      (assoc :circles restored-circles)\n      (update :redo-states rest)))\n\n(defn component []\n  [:<>\n   [:style\n    (str \"\n    #container {\n      position: relative;\n    }\n    .dismiss-popup-layer {\n      z-index: 1199;\n      background-color: rgb(0 0 0 / 0.02);\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      visibility: \"(if (or (= (-> @ui :context-menu :visibility) \"visible\")\n                           (= (-> @ui :diameter-dialog :visibility) \"visible\"))\n                     \"visible\"\n                     \"hidden\")\";\n    }\n    .popup {\n      z-index: 1200;\n      box-shadow: 2px 2px 10px 0px lightgrey;\n      padding: 7px;\n      width: fit-content;\n      background-color: white;\n      position: absolute;\n      left: \"(-> @ui :popup :x)\"px;\n      top: \"(-> @ui :popup :y)\"px;\n    }\n    #context-menu {\n      visibility: \"(-> @ui :context-menu :visibility)\";\n    }\n    #diameter-dialog {\n      visibility: \"(-> @ui :diameter-dialog :visibility)\";\n    }\n    #context-menu:hover {\n      background-color: lightgray;\n      cursor: pointer;\n    }\n    #range {\n      width: 100%;\n    }\n    canvas {\n      width: 100%;\n      height: 400px;\n      border: 1px solid lightgray;\n    }\n    .flex-evenly {\n      display: flex;\n      justify-content: space-evenly;\n      padding: 10px;\n    }\n    button {\n      font-size: large;\n      padding: 5px 15px;\n    }\n    \")]\n   [:div.flex-evenly\n    [:button {:disabled (empty? (:undo-states @component-state))\n              :onClick #(swap! component-state apply-undo)} \"Undo\"]\n    [:button {:disabled (empty? (:redo-states @component-state))\n              :onClick #(swap! component-state apply-redo)} \"Redo\"]]\n   [:div#container\n    [:canvas\n     {:onContextMenu #(swap! ui open-context-menu %)\n      :onMouseMove on-mouse-move\n      :onClick #(swap! component-state on-canvas-click %)}]\n    [:div.dismiss-popup-layer {:onClick #(do\n                                           (swap! component-state (fn [s] (register-undo s (:old-circles s))))\n                                           (swap! ui dismiss-popup %))\n                               :onContextMenu #(swap! ui open-context-menu %)}]\n    [:div#context-menu.popup {:onClick #(do\n                                          (swap! component-state (fn [s] (assoc s :old-circles (:circles s))))\n                                          (swap! ui open-diameter-dialog %))} \"Adjust diameter..\"]\n    [diameter-dialog]]])\n\n(defn ^:dev/after-load register-component! []\n  (util/define-custom-element! {:element-name \"circle-drawer\"\n                                :view-component component\n                                :this component-ref}))\n\n(register-component!)\n\n(comment\n  (deftest create-circle-test\n    (testing\n      (is (= (-> {:circles {}}\n                 (create-circle 0 0 10)\n                 :circles)\n           {0 {:x 0 :y 0 :radius 10 :id 0}}))\n      ))\n\n  (deftest points-distance-test\n    (testing\n      (is (= 5 (points-distance [0 0] [3 4])))\n      (is (= 5 (points-distance [1 1] [4 5])))\n      (is (= 13 (points-distance [1 1] [6 13])))))\n  )\n"]}