{"version":3,"sources":["seven_guis/sg_cells.cljs"],"mappings":"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","names":["js/seven-guis","js/seven-guis.sg-cells","js/seven-guis.sg-cells.component-state","seven-guis.sg-cells/component-state","reagent.core.atom","seven-guis.sg-cells/num-columns","seven-guis.sg-cells/num-rows","seven-guis.sg-cells/cell-regex","js/seven-guis.sg-cells.compile-eval-state","seven-guis.sg-cells/compile-eval-state","cljs.js.empty_state","seven-guis.sg-cells/evaluate","s","callback","cljs.js.eval_str","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","result","js/console.log","seven-guis.sg-cells/replace-cell-range","formula","p1__43450#","p1__43451#","cell-regex-string","cljs.core.subs","row-fn","js/parseInt","col-fn","cljs.core/first","clojure.string/upper-case","replace-fn","p__43452","vec__43453","cljs.core.nth","_","init","final","iter__4529__auto__","s__43457","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4525__auto__","s__43459","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__43461","cljs.core/chunk-buffer","i__43460","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43458","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__43456","n","cljs.core.range","c","cljs.core/char","clojure.string.join","$","clojure.string/replace","cljs.core/re-pattern","p__43468","vec__43469","seven-guis.sg-cells/evaluate-cell!","column","row","p1__43462#","p1__43464#","p2__43465#","p1__43466#","p2__43467#","formula?","clojure.string/starts-with?","parse-formula","p1__43463#","cljs.core/deref","cljs.core.get_in","cljs.core.keyword","string","dependants","set-error","cljs.core/assoc-in","set-value","cljs.core.update_in","cljs.core/dissoc","set-and-propagate!","p__43472","map__43473","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","value","error","cljs.core.swap_BANG_","cljs.core.dorun","cljs.core.map","js/seven-guis.sg-cells.intercept-undeclared-var-error","seven-guis.sg-cells/intercept-undeclared-var-error","error-log","js/console.error","args","vec__43475","undeclared","cljs.core/re-find","js/alert","p__43482","vec__43483","seven-guis.sg-cells/unsubscribe","state","dependant-column","dependant-row","p1__43478#","p1__43479#","old-formula","cell-references","G__43486","cljs.core/re-seq","referenced-column","referenced-row","p1__43480#","p2__43481#","cljs.core.reduce","cljs.core/remove","p__43491","vec__43492","seven-guis.sg-cells/subscribe","p1__43487#","p1__43488#","new-formula","G__43495","p1__43489#","p2__43490#","cljs.core/conj","p__43500","map__43501","seven-guis.sg-cells/cell","selected?","editing?","p1__43496#","p1__43497#","p2__43498#","onInputBlur","cljs.core.update","p1__43499#","seven-guis.sg-cells/component-style","seven-guis.sg-cells/component","s__43504","b__43506","i__43505","iter__43503","cljs.core.doall","s__43508","s__43510","b__43512","i__43511","iter__43509","iter__43507","col","cljs.core.comp","cljs.core/keyword","cljs.core._EQ_","G__43514","fexpr__43513","G__43516","fexpr__43515","seven-guis.sg-cells/register-component!","shadow.cljs.bootstrap.browser/init","cljs.core/prn","seven-guis.util/define-custom-element!","cljs.core/chunk-first"],"sourcesContent":["(ns seven-guis.sg-cells\n  (:require\n    [clojure.string :as string]\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]\n    [shadow.cljs.bootstrap.browser :as shadow.bootstrap]))\n\n(defonce component-state (reagent/atom {}))\n\n(def num-columns 26)\n(def num-rows 100)\n(def cell-regex #\"[a-zA-Z]\\d{1,2}\")\n\n(defonce compile-eval-state (cljs.js/empty-state))\n\n(defn evaluate [s callback]\n  (cljs.js/eval-str\n    compile-eval-state\n    s\n    nil\n    {:eval cljs.js/js-eval\n     :load (partial shadow.bootstrap/load compile-eval-state)\n     :context :expr}\n    (fn [result] (do (js/console.log result)\n                     (callback result)))))\n\n(defn replace-cell-range\n  \"Transform a formula like (apply + a0:c2) in (apply + [A0 B0 C0 A1 B1 C1 A2 B2 C2])\"\n  [formula]\n  (let [cell-regex-string (subs (str cell-regex) 1 (dec (count (str cell-regex))))\n        row-fn #(-> % (subs 1) js/parseInt)\n        col-fn #(-> % first string/upper-case .charCodeAt)\n        replace-fn (fn [[_ init final]]\n                     (-> (for [n (range (row-fn init) (inc (row-fn final)))\n                               c (range (col-fn init) (inc (col-fn final)))]\n                           (str (char c) n))\n                         (->> (string/join \" \"))\n                         (as-> $ (str \"[\" $ \"]\"))))]\n    (string/replace formula\n                    (re-pattern (str \"(\"cell-regex-string\"):(\"cell-regex-string\")\"))\n                    replace-fn)))\n\n(defn evaluate-cell! [[column row]]\n  (let [formula? #(when % (clojure.string/starts-with? % \"=\"))\n        parse-formula (fn [formula]\n                        (-> formula\n                            (subs 1)\n                            replace-cell-range\n                            (string/replace cell-regex\n                                            #(get-in @component-state [:domain\n                                                                       (-> % first string/upper-case keyword)\n                                                                       (-> % (subs 1) js/parseInt) :value] \"\"))))\n        string (get-in @component-state [:domain column row :string])\n        dependants (get-in @component-state [:domain column row :dependants])\n        set-error #(-> %1\n                       (assoc-in [:domain column row :value] \"#Error\")\n                       (assoc-in [:domain column row :error] %2))\n        set-value #(-> %1\n                       (assoc-in [:domain column row :value] %2)\n                       (update-in [:domain column row] dissoc :error))\n        set-and-propagate! (fn [{:keys [value error]}]\n                            (if error\n                              (swap! component-state set-error ^js (.-message ^js (.-cause error)))\n                              (swap! component-state set-value value))\n                            (dorun (map evaluate-cell! dependants)))]\n    (if (formula? string)\n      (evaluate (parse-formula string) set-and-propagate!)\n      (set-and-propagate! {:value string}))))\n\n(defonce intercept-undeclared-var-error\n  (let [error-log js/console.error]\n    (set! js/console.error (fn [& args]\n                             (when-let [[_ undeclared] (re-find #\"WARNING: Use of undeclared Var cljs.user/(\\S+)\" (first args))]\n                               (js/alert (str \"Were you trying to use \"undeclared\" as a string?\\nIf so, try surroding it with double quotes, like \\\"\"undeclared\"\\\".\")))\n                             (apply error-log args)))))\n\n(defn unsubscribe [state [dependant-column dependant-row]]\n  (let [old-formula (get-in state [:domain dependant-column dependant-row :string] \"\")\n        cell-references (some->> old-formula replace-cell-range (re-seq cell-regex))\n        referenced-column #(-> % first string/upper-case keyword)\n        referenced-row #(-> % (subs 1) js/parseInt)]\n    (reduce #(update-in %1\n                        [:domain (referenced-column %2) (referenced-row %2) :dependants]\n                        (partial remove #{[dependant-column dependant-row]}))\n            state\n            cell-references)))\n\n(defn subscribe [state [dependant-column dependant-row]]\n  (let [new-formula (get-in state [:domain dependant-column dependant-row :string] \"\")\n        cell-references (some->> new-formula replace-cell-range (re-seq cell-regex))\n        referenced-column #(-> % first string/upper-case keyword)\n        referenced-row #(-> % (subs 1) js/parseInt)]\n    (reduce #(update-in %1\n                        [:domain (referenced-column %2) (referenced-row %2) :dependants]\n                        conj\n                        [dependant-column dependant-row])\n            state\n            cell-references)))\n\n(defn cell [{:keys [column row string selected? editing? error value]}]\n  (let [formula? #(when % (clojure.string/starts-with? % \"=\"))\n        onInputBlur #(-> %1\n                         (update :ui dissoc :editing)\n                         (unsubscribe [column row])\n                         (assoc-in [:domain column row :string] %2)\n                         (subscribe [column row])\n                         (assoc-in [:domain column row :value] \"Loading...\"))]\n    (if editing?\n      [:input\n       {:onBlur #(do (swap! component-state onInputBlur (-> % .-target .-value))\n                     (evaluate-cell! [column row]))\n        :autoFocus true\n        :defaultValue string}]\n      [:span\n       {:class (when selected? \"selected\")\n        :title (when error error)\n        :onClick #(swap! component-state assoc-in [:ui :selected] #{[column row]})\n        :onDoubleClick #(swap! component-state assoc-in [:ui :editing] [column row])}\n       (str value)])))\n\n(defn component-style []\n  [:style\n   (str \"\n   .container {\n     display: grid;\n     grid: auto-flow / 30px repeat(\"num-columns\", 100px);\n     overflow: auto;\n     height: 500px;\n   }\n   span {\n     padding: 1px 5px;\n     min-height: 22px;\n     border: 1px solid lightgray;\n   }\n   span.selected {\n     border: 1px solid blue;\n   }\n   span.header {\n     text-align: center;\n     background-color: #f8f9fa;\n   }\n   \")])\n\n(defn component []\n  [:<>\n   [component-style]\n   [:div.container\n    [:span.header]\n    (for [c (range 65 (+ 65 num-columns))]\n      ^{:key (str \"header \" (char c))}\n      [:span.header (char c)])\n    (doall\n     (for [row (range num-rows)\n           col (map (comp keyword char) (range 65 (+ 65 num-columns)))]\n       ^{:key (str col row)}\n       [:<>\n        (when (= :A col) [:span.header row])\n        [cell {:column col :row row\n               :selected? ((get-in @component-state [:ui :selected] #{}) [col row])\n               :editing? (= (get-in @component-state [:ui :editing] []) [col row])\n               :string (get-in @component-state [:domain col row :string])\n               :value (get-in @component-state [:domain col row :value])\n               :error (get-in @component-state [:domain col row :error])}]]))]])\n\n(defn ^:dev/after-load register-component! []\n  (shadow.bootstrap/init compile-eval-state {:path \"/7guis/cells-evaluation\"} prn)\n  (util/define-custom-element! {:element-name \"sg-cells\"\n                                :view-component component}))\n\n(register-component!)\n"]}