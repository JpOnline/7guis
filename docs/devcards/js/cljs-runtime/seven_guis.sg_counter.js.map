{"version":3,"sources":["seven_guis/sg_counter.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAc,AAAA,AAACC;;AAExB,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AASiB,AAACC,AAAMJ,AAAcK;AATtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAYiBF;;AAEjB,AAAA,AAAuBM;AAAvB,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAC6CJ;;AAEhD,AAACG","names":["js/seven-guis","js/seven-guis.sg-counter","js/seven-guis.sg-counter.counter-state","seven-guis.sg-counter/counter-state","reagent.core.atom","cljs.core/deref","seven-guis.sg-counter/counter","cljs.core.swap_BANG_","cljs.core/inc","seven-guis.sg-counter/register-component!","seven-guis.util/define-custom-element!"],"sourcesContent":["(ns seven-guis.sg-counter\n  (:require\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]))\n\n(defonce counter-state (reagent/atom 0))\n\n(defn counter []\n  [:<>\n   ;; It's possible to use encapsulated CSS.\n   [:style\n    \"@import\n    \\\"https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css\\\"\"]\n   [:div.level\n    [:div.level-item\n     [:a.button.is-rounded.is-large.is-light\n      {:onClick #(swap! counter-state inc)}\n      \"Count\"]]\n    [:div.level-item\n     [:h1.title @counter-state]]]])\n\n(defn ^:dev/after-load register-component! []\n  (util/define-custom-element! {:element-name \"sg-counter\"\n                                :view-component counter}))\n\n(register-component!)\n"]}