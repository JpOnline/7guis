{"version":3,"sources":["seven_guis/sg_crud.cljs"],"mappings":"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","names":["js/seven-guis","js/seven-guis.sg-crud","js/seven-guis.sg-crud.component-state","seven-guis.sg-crud/component-state","reagent.core.atom","p__37019","map__37020","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__37021","seven-guis.sg-crud/filtered-names","names","filter-prefix","p1__37018#","cljs.core.filter","clojure.string/starts-with?","clojure.string/lower-case","cljs.core/vals","p__37024","map__37025","map__37026","seven-guis.sg-crud/create-name","name","surname","state","next-id","cljs.core/max","cljs.core/keys","t-sur","clojure.string/trim","t-name","cljs.core/empty?","cljs.core.update","cljs.core/assoc","p__37029","map__37030","map__37031","seven-guis.sg-crud/update-name","selected-id","cljs.core.update_in","p__37034","map__37035","map__37036","seven-guis.sg-crud/delete-name","cljs.core/dissoc","p__37039","map__37040","seven-guis.sg-crud/select-name","selected-id-str","map__37042","js/parseInt","cljs.core/assoc-in","p__37044","map__37045","seven-guis.sg-crud/someone-is-selected?","seven-guis.sg-crud/component-style","p1__37047#","seven-guis.sg-crud/avoid-multiple-selection","p1__37048#","p1__37049#","p1__37050#","p1__37051#","seven-guis.sg-crud/component","cljs.core.swap_BANG_","cljs.core/update","iter__4529__auto__","s__37053","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__37055","cljs.core/chunk-buffer","i__37054","map__37056","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37052","cljs.core/chunk-rest","map__37058","cljs.core/first","cljs.core/cons","cljs.core/rest","id","cljs.core/deref","cljs.core.get_in","seven-guis.sg-crud/register-component!","seven-guis.util/define-custom-element!","cljs.core/chunk-first"],"sourcesContent":["(ns seven-guis.sg-crud\n  (:require\n[cljs.test :refer [is testing]]\n    [clojure.string :as string]\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]))\n\n(defonce component-state (reagent/atom {:domain {0 {:id 0 :name \"Jp\" :surname \"Soares\"}}\n                                        :ui {:filter-prefix \"\"\n                                             :selected-id -1\n                                             :name \"\"\n                                             :surname \"\"}}))\n\n(defn filtered-names [{names :domain {:keys [filter-prefix]} :ui}]\n  (filter #(string/starts-with? (string/lower-case (:surname %))\n                                (string/lower-case filter-prefix))\n          (vals names)))\n\n(defn create-name [{{:keys [name surname]} :ui names :domain :as state}]\n  (let [next-id (inc (apply max (keys names)))\n        t-sur (string/trim surname)\n        t-name (string/trim name)]\n    (if (or (empty? t-sur) (empty? t-name))\n      state\n      (-> state\n        (update :domain assoc next-id {:id next-id :name t-name :surname t-sur})\n        (update :ui assoc :name \"\")\n        (update :ui assoc :surname \"\")))))\n\n(defn update-name [{{:keys [name surname selected-id]} :ui names :domain :as state}]\n  (let [t-sur (string/trim surname)\n        t-name (string/trim name)]\n    (if (or (empty? t-sur) (empty? t-name))\n      state\n      (-> state\n        (update-in [:domain selected-id] assoc :name t-name)\n        (update-in [:domain selected-id] assoc :surname t-sur)))))\n\n(defn delete-name [{{:keys [selected-id]} :ui :as state}]\n  (-> state\n      (update :domain dissoc selected-id)\n      (update :ui dissoc :selected-id)))\n\n(defn select-name [{names :domain :as state} selected-id-str]\n  (let [selected-id (js/parseInt selected-id-str)\n        {:keys [name surname]} (get names selected-id {:name \"\" :surname \"\"})]\n    (-> state\n      (assoc-in [:ui :selected-id] selected-id)\n      (assoc-in [:ui :name] name)\n      (assoc-in [:ui :surname] surname))))\n\n(defn someone-is-selected? [{:keys [selected-id]}]\n  (>= selected-id 0))\n\n(defn component-style []\n  [:style\n    \"\n    #container {\n      display: grid;\n      gap: 5px;\n    }\n    label[for=filter] {\n      grid-row: 1/2;\n      grid-column: 1/2;\n    }\n    #filter {\n      grid-row: 1/2;\n      grid-column: 2/3;\n    }\n    select {\n      min-width: 130px;\n      grid-row: 2/5;\n      grid-column: 1/3;\n    }\n    label[for=name] {\n      grid-row: 2/3;\n      grid-column: 3/4;\n    }\n    #name {\n      grid-row: 2/3;\n      grid-column: 4/5;\n    }\n    label[for=surname] {\n      grid-row: 3/4;\n      grid-column: 3/4;\n    }\n    #surname {\n      grid-row: 3/4;\n      grid-column: 4/5;\n    }\n    #buttons {\n      grid-row: 5/6;\n      grid-column: 1/3;\n      display: flex;\n      justify-content: space-evenly;\n    }\"])\n\n(def avoid-multiple-selection\n  #(set! (-> % .-target .-selectedIndex) (-> % .-target .-selectedIndex)))\n\n(defn component []\n  [:<>\n   [component-style]\n   [:div#container\n    [:label {:for \"filter\"} \"Filter prefix:\"]\n    [:input#filter\n     {:type \"text\"\n      :onChange #(swap! component-state\n                        update :ui\n                        assoc :filter-prefix  (-> % .-target .-value))}]\n    [:select {:multiple true\n              :onChange #(do (swap! component-state select-name (-> % .-target .-value))\n                             (avoid-multiple-selection %))}\n     (for [{:keys [name surname id]} (filtered-names @component-state)]\n       ^{:key id}\n       [:option {:value id} (str surname\", \"name)])]\n    [:label {:for \"name\"} \"Name:\"]\n    [:input#name\n     {:type \"text\"\n      :value (get-in @component-state [:ui :name])\n      :onChange #(swap! component-state\n                        update :ui\n                        assoc :name  (-> % .-target .-value))}]\n    [:label {:for \"surname\"} \"Surname:\"]\n    [:input#surname\n     {:type \"text\"\n      :value (get-in @component-state [:ui :surname])\n      :onChange #(swap! component-state\n                        update :ui\n                        assoc :surname  (-> % .-target .-value))}]\n    [:div#buttons\n     [:button\n      {:onClick #(swap! component-state create-name)}\n      \"Create\"]\n     [:button\n      {:onClick #(swap! component-state update-name)\n       :disabled (not (someone-is-selected? (:ui @component-state)))}\n      \"Update\"]\n     [:button\n      {:onClick #(swap! component-state delete-name)\n       :disabled (not (someone-is-selected? (:ui @component-state)))}\n      \"Delete\"]]]])\n\n(defn ^:dev/after-load register-component! []\n  (util/define-custom-element! {:element-name \"sg-crud\"\n                                :view-component component}))\n\n(register-component!)\n\n(comment\n  (require '[cljs.test :refer [is testing]])\n  (testing \"All tests\"\n    (testing\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}}\n                :ui {:filter-prefix \"\"\n                     :name \"name\"\n                     :surname \"another\"}}\n               (create-name))\n           {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                     2 {:id 2 :name \"name\" :surname \"another\"}}\n                :ui {:filter-prefix \"\"\n                     :name \"\"\n                     :surname \"\"}}))\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}}\n                :ui {:filter-prefix \"\"\n                     :name \" with \"\n                     :surname \" spaces \"}}\n               (create-name))\n           {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                     2 {:id 2 :name \"with\" :surname \"spaces\"}}\n                :ui {:filter-prefix \"\"\n                     :name \"\"\n                     :surname \"\"}}))\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}}\n                :ui {:filter-prefix \"\"\n                     :name \"no surname\"\n                     :surname \"\"}}\n               (create-name))\n           {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}}\n                :ui {:filter-prefix \"\"\n                     :name \"no surname\"\n                     :surname \"\"}})))\n  (testing\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                         2 {:id 2 :name \"Paulo\" :surname \"Souza\"}}\n                :ui {:filter-prefix \"soa\"\n                     :selected-id nil\n                     :name \"\"\n                     :surname \"\"}}\n               (select-name \"1\"))\n           {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                     2 {:id 2 :name \"Paulo\" :surname \"Souza\"}}\n            :ui {:filter-prefix \"soa\"\n                 :selected-id 1\n                 :name \"Jp\"\n                 :surname \"Soares\"}})))\n  (testing\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                         2 {:id 2 :name \"Paulo\" :surname \"Souza\"}}\n                :ui {:filter-prefix \"soa\"\n                     :name \"\"\n                     :surname \"\"}}\n               (filtered-names))\n           '({:id 1 :name \"Jp\" :surname \"Soares\"}))))\n  (testing\n    (is (= (-> {:domain {0 {:id 0 :name \"Jp\" :surname \"Soares\"}}\n                :ui {:filter-prefix \"\"\n                     :selected-id 0\n                     :name \"Jo\u00e3o Paulo\"\n                     :surname \"Soares\"}}\n               (update-name))\n           {:domain {0 {:id 0 :name \"Jo\u00e3o Paulo\" :surname \"Soares\"}}\n            :ui {:filter-prefix \"\"\n                 :selected-id 0\n                 :name \"Jo\u00e3o Paulo\"\n                 :surname \"Soares\"}})))\n  (testing\n    (is (= (-> {:domain {1 {:id 1 :name \"Jp\" :surname \"Soares\"}\n                         2 {:id 2 :name \"Paulo\" :surname \"Souza\"}}\n                :ui {:selected-id 1}}\n               (delete-name))\n           {:domain {2 {:id 2 :name \"Paulo\" :surname \"Souza\"}}\n            :ui {}}))))\n  )\n"]}