{"version":3,"sources":["seven_guis/sg_timer.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAE+B,AAAA,AAAG,AAAU,AAAAC;;AAE5D,AAAA,AAAAL,AAAAC,AAAAK;AAAA;AAAA,AAAA,AAASC,AACP,AAAA,AAACC;AAAD,AACG,AAACC,AAAMN,AAAM,AAAAO;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAmDQ;AAAnD,AAAAJ,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAsBM;AAAtB,AAAAF,AAAAJ,AAAA,AAA8BO;AAA9B,AACE,AAAME,AAAY,AAAA,AAAU,AAAG,AAAA,AAAG,AAAU,AAAAf,AAAkBa;AACxDG,AAAU,AAAG,AAAA,AAAG,AAAU,AAAAhB,AAAkBY;AADlD,AAEE,AAAI,AAAIA,AAAQD;AACd,AAAA,AAACM,AAAMH,AAAuBE;;AAC9B,AAAA,AAACC,AAAMH,AAAeC;;;AAN5C;;AASF,AAAA,AAAMI;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AA2B8B,AAAA,AAAA,AAAAE,AAAYtB,AAAc,AAAA,AAAA,AAAAsB,AAAWtB,AAC5D,AAAA,AAAA,AAAAsB,AAAWtB;AA5BlB,AAiCiB,AAAA,AAACM,AAAMN,AAAMuB,AAAgB,AAACC,AAAY,AAAA,AAAAJ;AAjC3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAqCgB,AAAA,AAACd,AAAMN,AAAMuB,AAAuB,AAAA,AAAG,AAAU,AAAArB;AArCjE;;AAwCA,AAAA,AAAuBuB;AAAvB,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAC6CL;;AAEhD,AAACI","names":["js/seven-guis","js/seven-guis.sg-timer","js/seven-guis.sg-timer.state","seven-guis.sg-timer/state","reagent.core.atom","js/Date","js/seven-guis.sg-timer.tick","seven-guis.sg-timer/tick","js/setInterval","cljs.core.swap_BANG_","p__36481","map__36482","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","duration","elapsed","start-timestamp","state","new-elapsed","new-start","cljs.core.assoc","p1__36484#","seven-guis.sg-timer/component","cljs.core/deref","cljs.core/assoc","js/parseInt","seven-guis.sg-timer/register-component!","seven-guis.util/define-custom-element!"],"sourcesContent":["(ns seven-guis.sg-timer\n  (:require\n    [reagent.core :as reagent]\n    [seven-guis.util :as util]))\n\n(defonce state (reagent/atom {:duration 50\n                              :elapsed 0\n                              :start-timestamp (/ (.getTime (js/Date.)) 1000)}))\n\n(defonce tick\n  (js/setInterval\n    #(swap! state (fn [{:keys [duration elapsed start-timestamp] :as state}]\n                    (let [new-elapsed (.toFixed (- (/ (.getTime (js/Date.)) 1000) start-timestamp) 1)\n                          new-start (- (/ (.getTime (js/Date.)) 1000) elapsed)]\n                      (if (>= elapsed duration)\n                        (assoc state :start-timestamp new-start)\n                        (assoc state :elapsed new-elapsed)))))\n    100))\n\n(defn component []\n  [:div#container\n   [:style\n    \"\n    #container {\n      max-width: 340px;\n    }\n    .flex {\n      display: flex;\n    }\n    .grow {\n      flex-grow: 1;\n      align-self: center;\n      margin: 0 5px;\n    }\n    #button-div {\n      display:flex;\n      flex-direction: column;\n      margin: 5px;\n    }\n    button {\n      width: 50%;\n      align-self: center;\n    }\n    \"]\n   [:div.flex\n    [:span \"Elapsed Time:\"]\n    [:meter.grow {:min 0 :max (:duration @state) :value (:elapsed @state)}]]\n   [:p (:elapsed @state)\"s\"]\n   [:div.flex\n    [:span \"Duration:\"]\n    [:input.grow\n     {:type \"range\"\n      :onChange #(swap! state assoc :duration (js/parseInt (-> % .-target .-value)))}]]\n   [:div#button-div\n    [:button\n     {:type \"reset\"\n      :onClick #(swap! state assoc :start-timestamp (/ (.getTime (js/Date.)) 1000))}\n     \"Reset\"]]])\n\n(defn ^:dev/after-load register-component! []\n  (util/define-custom-element! {:element-name \"sg-timer\"\n                                :view-component component}))\n\n(register-component!)\n\n"]}